# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-18.04"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # A
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  MASTER_NUM = 1
  MASTER_CNT = 0
  NODE_NUM = 2
  BASE_IP = "177.17.10.4"

  (1..MASTER_NUM).each do |i|

    config.vm.define "kmas#{i}" do |node|

      MASTER_CNT = i

      node.vm.provider "virtualbox" do |vb, override|
        vb.memory = "2048"
        vb.cpus = 2
        override.vm.hostname = "kmas#{i}"
        vb.name = "kmas#{i}"
        override.vm.network "private_network", ip: "#{BASE_IP}#{i}"
      end

      node.vm.provision "basic", type: "shell", inline: <<-SHELL
        sudo apt-get update
        sudo apt-get install -y tree
        sudo apt-get install -y unzip
        sudo apt-get install -y git 
        sudo apt-get upgrade -y
      SHELL

      #node.vm.provision "install-docker", type: "shell", inline: <<-SHELL
      #  curl -fsSL https://get.docker.com -o get-docker.sh
      #  sudo sh get-docker.sh
      #SHELL

      node.vm.provision "install-docker", type: "shell", path: "get-docker.sh"

      node.vm.provision "install-ansible", type: "shell", inline: <<-SHELL
        sudo apt-get install -y software-properties-common
        sudo apt-add-repository --yes --update ppa:ansible/ansible
        sudo apt-get install -y ansible
      SHELL

      node.vm.provision "install-k8s", type: "shell", inline: <<-SHELL
        sudo snap install microk8s --classic
        sudo ufw allow in on cni0 && sudo ufw allow out on cni0
        sudo ufw default allow routed
        sudo microk8s status --wait-ready
        sudo microk8s enable dns dashboard storage
        sudo microk8s status --wait-ready
        #sudo usermod -a -G microk8s vagrant
        #sudo chown -f -R vagrant .kube/
      SHELL

    end

  end

  (1..NODE_NUM).each do |i|

    config.vm.define "kube#{i}" do |node|

      node.vm.provider "virtualbox" do |vb, override|
        vb.memory = "2048"
        vb.cpus = 1
        override.vm.hostname = "kube#{i}"
        vb.name = "kube#{i}"
        override.vm.network "private_network", ip: "#{BASE_IP}#{i+MASTER_NUM}"
      end

      node.vm.provision "basic", type: "shell", inline: <<-SHELL
        sudo apt-get update
        #sudo apt-get install -y tree
        #sudo apt-get install -y unzip
        #sudo apt-get install -y git 
        #sudo apt-get install -y software-properties-common
        #sudo apt-add-repository --yes --update ppa:ansible/ansible
        #sudo apt-get install -y ansible
        sudo apt-get upgrade -y
      SHELL

      node.vm.provision "install-k8s", type: "shell", inline: <<-SHELL
        sudo snap install microk8s --classic
        sudo ufw allow in on cni0 && sudo ufw allow out on cni0
        sudo ufw default allow routed
        sudo microk8s status --wait-ready
        sudo microk8s enable dns dashboard storage
        sudo microk8s status --wait-ready
        #sudo usermod -a -G microk8s vagrant
        #sudo chown -f -R vagrant .kube/
      SHELL

    end

  end

end
