# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "hashicorp/bionic64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "512"
    vb.cpus = 1
  end
  
  config.vm.provision "basic", type: "shell", inline: <<-SHELL
    sudo apt-get update
    sudo apt-get install -y tree
    sudo apt-get install -y unzip
    sudo apt-get install -y git 
  SHELL

  config.vm.provision "aws-cli-install", type: "shell", inline: <<-SHELL
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip awscliv2.zip
    sudo ./aws/install
  SHELL

  #config.vm.provision "aws-credentials", type: "shell", path: "aws.sh"

  config.vm.provision "aws-cli-credentials", type: "shell", inline: <<-SHELL
    sudo cp /vagrant/credentials.csv ./credentials.csv
    sudo -H -u vagrant bash -c 'aws configure import --csv file://credentials.csv'
    sudo echo y | sudo rm credentials.csv
  SHELL

  config.vm.provision "aws-cli-completer", type: "shell", inline: <<-SHELL
    sudo -H -u vagrant bash -c 'echo >> ~/.profile'
    sudo -H -u vagrant bash -c 'echo "export PATH=/usr/local/bin:\\$PATH" >> ~/.profile'
    sudo -H -u vagrant bash -c 'echo >> ~/.profile'
    sudo -H -u vagrant bash -c 'source ~/.profile'
    complete -C /usr/local/bin/aws_completer aws
  SHELL

  config.vm.provision "aws-cli-remove", type: "shell", run: "never", inline: <<-SHELL
    sudo -H -u vagrant bash -c 'whoami'
    sudo -rm /usr/local/bin/aws
    sudo -rm /usr/local/bin/aws_completer
    sudo -rm -rf /usr/local/aws-cli
  SHELL

end
